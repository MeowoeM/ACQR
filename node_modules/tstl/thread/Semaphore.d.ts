import { ITimedLockable } from "../internal/thread/ITimedLockable";
/**
 * Counting semaphore.
 *
 * @author Jeongho Nam - https://github.com/samchon
 */
export declare class Semaphore<Max extends number = number> {
    private max_;
    private acquiring_;
    private queue_;
    /**
     * Initializer Constructor.
     *
     * @param max Number of maximum sections lockable.
     */
    constructor(max: Max);
    /**
     * Number of maximum sections lockable.
     */
    max(): Max;
    get_lockable(): ITimedLockable;
    /**
     * Acquire a section until be released.
     */
    acquire(): Promise<void>;
    /**
     * Try acquire a section.
     *
     * @return Whether succeeded to acquire or not.
     */
    try_acquire(): Promise<boolean>;
    /**
     * @inheritDoc
     */
    release(count?: number): Promise<void>;
    private _Release;
    private _Cancel;
    /**
     * Try acquire a section until timeout.
     *
     * @param ms The maximum miliseconds for waiting.
     * @return Whether succeded to acquire or not.
     */
    try_acquire_for(ms: number): Promise<boolean>;
    /**
     * Try acquire a section until time expiration.
     *
     * @param at The maximum time point to wait.
     * @return Whether succeded to acquire or not.
     */
    try_acquire_until(at: Date): Promise<boolean>;
}
export declare namespace Semaphore {
}
//# sourceMappingURL=Semaphore.d.ts.map