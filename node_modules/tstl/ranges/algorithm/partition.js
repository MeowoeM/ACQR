"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
//================================================================ 
/** @module std.ranges */
//================================================================
var base = __importStar(require("../../algorithm/partition"));
var factory_1 = require("../../iterator/factory");
/**
 * Test whether a range is partitioned.
 *
 * @param range An iterable ranged container.
 * @param pred An unary function predicates partition. Returns `true`, if an element belongs to the first section, otherwise `false` which means the element belongs to the second section.
 *
 * @return Whether the range is partition or not.
 */
function is_partitioned(range, pred) {
    return base.is_partitioned(factory_1.begin(range), factory_1.end(range), pred);
}
exports.is_partitioned = is_partitioned;
/**
 * Get partition point.
 *
 * @param range An iterable ranged container.
 * @param pred An unary function predicates partition. Returns `true`, if an element belongs to the first section, otherwise `false` which means the element belongs to the second section.
 *
 * @return Iterator to the first element of the second section.
 */
function partition_point(range, pred) {
    return base.partition_point(factory_1.begin(range), factory_1.end(range), pred);
}
exports.partition_point = partition_point;
/**
 * Partition a range into two sections.
 *
 * @param range An iterable ranged container.
 * @param pred An unary function predicates partition. Returns `true`, if an element belongs to the first section, otherwise `false` which means the element belongs to the second section.
 *
 * @return Iterator to the first element of the second section.
 */
function partition(range, pred) {
    return base.partition(factory_1.begin(range), factory_1.end(range), pred);
}
exports.partition = partition;
/**
 * Partition a range into two sections with stable ordering.
 *
 * @param range An iterable ranged container.
 * @param pred An unary function predicates partition. Returns `true`, if an element belongs to the first section, otherwise `false` which means the element belongs to the second section.
 *
 * @return Iterator to the first element of the second section.
 */
function stable_partition(range, pred) {
    return base.stable_partition(factory_1.begin(range), factory_1.end(range), pred);
}
exports.stable_partition = stable_partition;
/**
 * Partition a range into two outputs.
 *
 * @param range An iterable ranged container.
 * @param output_true Output iterator to the first position for the first section.
 * @param output_false Output iterator to the first position for the second section.
 * @param pred An unary function predicates partition. Returns `true`, if an element belongs to the first section, otherwise `false` which means the element belongs to the second section.
 *
 * @return Iterator to the first element of the second section.
 */
function partition_copy(range, output_true, output_false, pred) {
    return base.partition_copy(factory_1.begin(range), factory_1.end(range), output_true, output_false, pred);
}
exports.partition_copy = partition_copy;
//# sourceMappingURL=partition.js.map